// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Prog_POE.Data;

#nullable disable

namespace Prog_POE.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250430182724_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Prog_POE.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FarmerId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsOrganic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId");

                    b.HasIndex("FarmerId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Category = "Vegetables",
                            Description = "Fresh organic tomatoes grown without pesticides",
                            FarmerId = 2,
                            ImageUrl = "/images/products/tomatoes.jpg",
                            IsOrganic = true,
                            Name = "Organic Tomatoes",
                            Price = 25.99m,
                            ProductionDate = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 2,
                            Category = "Dairy",
                            Description = "Farm fresh eggs from free-range chickens",
                            FarmerId = 2,
                            ImageUrl = "/images/products/eggs.jpg",
                            IsOrganic = true,
                            Name = "Free-Range Eggs",
                            Price = 45.50m,
                            ProductionDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 3,
                            Category = "Meat",
                            Description = "Premium grass-fed beef from ethically raised cattle",
                            FarmerId = 3,
                            ImageUrl = "/images/products/beef.jpg",
                            IsOrganic = true,
                            Name = "Grass-Fed Beef",
                            Price = 180.00m,
                            ProductionDate = new DateTime(2025, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 4,
                            Category = "Sweeteners",
                            Description = "Raw, unfiltered honey from local beehives",
                            FarmerId = 3,
                            ImageUrl = "/images/products/honey.jpg",
                            IsOrganic = true,
                            Name = "Honey",
                            Price = 85.75m,
                            ProductionDate = new DateTime(2025, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 5,
                            Category = "Vegetables",
                            Description = "Fresh organic spinach leaves",
                            FarmerId = 2,
                            ImageUrl = "/images/products/spinach.jpg",
                            IsOrganic = true,
                            Name = "Organic Spinach",
                            Price = 18.99m,
                            ProductionDate = new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Prog_POE.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FarmDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FarmLocation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FarmName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "john.smith@agrienergy.com",
                            FirstName = "John",
                            LastName = "Smith",
                            Password = "password123",
                            Role = "Employee",
                            Username = "employee1"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "sarah@greenfarms.co.za",
                            FarmDescription = "Sustainable organic farm specializing in vegetables and fruits.",
                            FarmLocation = "Western Cape",
                            FarmName = "Green Valley Farms",
                            FirstName = "Sarah",
                            LastName = "Johnson",
                            Password = "password123",
                            Role = "Farmer",
                            Username = "farmer1"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "david@sunrisefarm.co.za",
                            FarmDescription = "Family-owned farm focusing on sustainable livestock and dairy production.",
                            FarmLocation = "KwaZulu-Natal",
                            FarmName = "Sunrise Eco Farm",
                            FirstName = "David",
                            LastName = "Nkosi",
                            Password = "password123",
                            Role = "Farmer",
                            Username = "farmer2"
                        });
                });

            modelBuilder.Entity("Prog_POE.Models.Product", b =>
                {
                    b.HasOne("Prog_POE.Models.User", "Farmer")
                        .WithMany("Products")
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("Prog_POE.Models.User", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
